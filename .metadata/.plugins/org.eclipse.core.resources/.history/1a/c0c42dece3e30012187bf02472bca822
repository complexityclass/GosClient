package com.example.http;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.DefaultClientConnection;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.params.HttpProtocolParams;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Environment;
import android.webkit.WebSettings;

/**
 * @author complexityclass
 * 
 *         Class to get/post request to pgu.khv.gov.ru and save cookies
 */
public class Connect {

	public static final String URL = "http://pgu.khv.gov.ru/";

	private HttpClient client;
	private Context context;
	private CookieStore cookieStore;

	public Connect(Context context) {
		this.client = new DefaultHttpClient();
		this.context = context;
		CookieHandler.setDefault(new CookieManager());
		cookieStore = new BasicCookieStore();
	}

	public StringBuffer doGet(String url) {

		HttpGet request = new HttpGet(url);
		HttpProtocolParams.setUserAgent(client.getParams(), "My funcy UA");
		StringBuffer result = null;
		try {

			HttpResponse response = client.execute(request);
			System.out.println("Response Code:" + response.getStatusLine().getStatusCode());

			/* Print response body into String */
			BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			result = new StringBuffer();
			String line = "";

			while ((line = rd.readLine()) != null) {
				result.append(line);
			}

			Header[] cookiesArray = response.getHeaders("Set-Cookie");

			/*
			 * Header[] allHeaders = response.getAllHeaders(); for (int i = 0; i
			 * < allHeaders.length; i++) {
			 * 
			 * System.out.println("---------------------Header " + i +
			 * ":-------------------------"); System.out.println("name : " +
			 * allHeaders[i].getName()); System.out.println("value :" +
			 * allHeaders[i].getValue()); System.out.println(
			 * "---------------------------------------------------------------"
			 * );
			 * 
			 * }
			 */
			
			System.out.println(cookiesArray.length + "Length!!!!!!!!!!!!!!!!!!!");
			System.out.println(cookiesArray[0].getName() + " ############## " + cookiesArray[0].getValue());

			for (int i = 0; i < cookiesArray.length; i++) {
				Cookie cookie = new BasicClientCookie(cookiesArray[i].getName().toString(), cookiesArray[i].getValue().toString());
				cookieStore.addCookie(cookie);
			}

		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		printCookies();

		return result;

	}

	public void printCookies() {

		System.out.println("------Start Cookies Block-----------");

		List<Cookie> cookiesList = cookieStore.getCookies();

		if (cookiesList.size() > 0) {

			for (Iterator<Cookie> it = cookiesList.iterator(); it.hasNext();) {
				System.out.println("Cookie " + "name :" + it.next().getName() + "value :" + it.next().getValue());
			}
		} else {
			System.out.println("CookieStore is empty!");
		}

	}

}
