package com.example.http;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.Header;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.protocol.ClientContext;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.DefaultClientConnection;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.impl.cookie.BasicClientCookie;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.BasicHttpContext;
import org.apache.http.protocol.HttpContext;

import android.annotation.SuppressLint;
import android.content.Context;
import android.os.Environment;
import android.webkit.WebSettings;

/**
 * @author complexityclass
 * 
 *         Class to get/post request to pgu.khv.gov.ru and save cookies
 */
public class Connect {

	public static final String URL = "http://pgu.khv.gov.ru/";

	private HttpClient client;
	private Context context;
	private CookieStore cookieStore;

	public Connect(Context context) {

		DefaultHttpClient ret = null;

		// Sets up http parameters
		HttpParams params = new BasicHttpParams();
		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
		HttpProtocolParams.setContentCharset(params, "utf-8");
		params.setBooleanParameter("http.protocol.expect-continue", false);

		// Registers schemes for both http and https
		SchemeRegistry registry = new SchemeRegistry();
		registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
		final SSLSocketFactory sslSocketFactory = SSLSocketFactory.getSocketFactory();
		sslSocketFactory.setHostnameVerifier(SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
		registry.register(new Scheme("https", sslSocketFactory, 443));
		ThreadSafeClientConnManager manager = new ThreadSafeClientConnManager(params, registry);
		ret = new DefaultHttpClient(manager, params);
		
		try {
			SSLContext ctx = SSLContext.getInstance("TLS");
			
			X509TrustManager tm = new X509TrustManager() {
				
				public X509Certificate[] getAcceptedIssuers() {
					return null;
				}
				
				public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
				}
				
				public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
				}
			};
			try {
				ctx.init(null, new TrustManager[] {tm}, null);
			} catch (KeyManagementException e) {
				e.printStackTrace();
			}
			
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		
		

		this.client = ret;
		this.context = context;
		CookieHandler.setDefault(new CookieManager());
		cookieStore = new BasicCookieStore();

	}

	public StringBuffer topgu(String url) {

		HttpGet request = new HttpGet(url);
		HttpProtocolParams.setUserAgent(client.getParams(), "My funcy UA");
		StringBuffer result = null;
		try {

			HttpResponse response = client.execute(request);
			System.out.println("Response Code:" + response.getStatusLine().getStatusCode());

			/* Print response body into String */
			BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
			result = new StringBuffer();
			String line = "";

			while ((line = rd.readLine()) != null) {
				result.append(line);
			}

			Header[] cookiesArray = response.getHeaders("Set-Cookie");

			/*
			 * Header[] allHeaders = response.getAllHeaders(); for (int i = 0; i
			 * < allHeaders.length; i++) {
			 * System.out.println("---------------------Header " + i +
			 * ":-------------------------"); System.out.println("name : " +
			 * allHeaders[i].getName()); System.out.println("value :" +
			 * allHeaders[i].getValue()); System.out.println(
			 * "---------------------------------------------------------------"
			 * );}
			 */

			for (int i = 0; i < cookiesArray.length; i++) {
				Cookie cookie = new BasicClientCookie(cookiesArray[i].getName().toString(), cookiesArray[i].getValue()
						.toString());
				cookieStore.addCookie(cookie);
			}

			List<Cookie> cookieList = cookieStore.getCookies();
			for (int i = 0; i < cookieList.size(); i++) {
				System.out.println("Cookie " + "name :" + cookieList.get(i).getName() + "value :"
						+ cookieList.get(i).getValue());
			}

		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return result;

	}

	public String doGet(String url) {
		HttpContext localContext = new BasicHttpContext();
		localContext.setAttribute(ClientContext.COOKIE_STORE, cookieStore);
		HttpGet request = new HttpGet(url);
		HttpProtocolParams.setUserAgent(client.getParams(), "My funcy UA");

		try {
			HttpResponse response = client.execute(request, localContext);
			System.out.println("Response Code:" + response.getStatusLine().getStatusCode());

			Header[] cookiesArray = response.getHeaders("Set-Cookie");

			for (int i = 0; i < cookiesArray.length; i++) {
				Cookie cookie = new BasicClientCookie(cookiesArray[i].getName().toString(), cookiesArray[i].getValue()
						.toString());
				cookieStore.addCookie(cookie);
			}

			List<Cookie> cookieList = cookieStore.getCookies();
			for (int i = 0; i < cookieList.size(); i++) {
				System.out.println("Cookie " + "name :" + cookieList.get(i).getName() + "value :"
						+ cookieList.get(i).getValue());
			}

		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return "second get complited!";

	}

}
